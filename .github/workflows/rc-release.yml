name: Auto Release RC

on:
  push:
    branches: [main]
    paths:
      - 'package.json'
      - 'package-lock.json'
      - 'src/**'

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run tests
        run: npm test

      - name: Run linting
        run: npm run lint

      - name: Build project
        run: npm run build

  create-rc-release:
    name: Create RC Release
    runs-on: ubuntu-latest
    needs: test
    permissions:
      contents: write
      actions: read
      id-token: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build project
        run: npm run build

      - name: Generate version
        id: version
        run: |
          # Get current version from package.json
          CURRENT_VERSION=$(node -p "require('./package.json').version")

          # Get commit short SHA
          COMMIT_SHA=$(git rev-parse --short HEAD)

          # Get commit count since last tag (or total if no tags)
          COMMIT_COUNT=$(git rev-list --count HEAD)

          # Create RC version: current_version-rc.commit_count.commit_sha
          RC_VERSION="${CURRENT_VERSION}-rc.${COMMIT_COUNT}.${COMMIT_SHA}"

          echo "current_version=${CURRENT_VERSION}" >> $GITHUB_OUTPUT
          echo "rc_version=${RC_VERSION}" >> $GITHUB_OUTPUT
          echo "commit_sha=${COMMIT_SHA}" >> $GITHUB_OUTPUT
          echo "commit_count=${COMMIT_COUNT}" >> $GITHUB_OUTPUT

          echo "Generated RC version: ${RC_VERSION}"

      - name: Update package.json version
        run: |
          # Temporarily update package.json for the build
          npm version ${{ steps.version.outputs.rc_version }} --no-git-tag-version

      - name: Create release package
        run: |
          echo "Creating release package for version ${{ steps.version.outputs.rc_version }}..."
          mkdir -p release-package

          # Copy essential files
          cp -r dist release-package/
          cp package.json package-lock.json README.md LICENSE release-package/

          # Install production dependencies
          cd release-package
          npm ci --production --silent

          # Create tarball
          cd ..
          tar -czf mobile-xray-mcp-${{ steps.version.outputs.rc_version }}.tar.gz -C release-package .

          # Show package info
          echo "Package created: mobile-xray-mcp-${{ steps.version.outputs.rc_version }}.tar.gz"
          ls -lh mobile-xray-mcp-${{ steps.version.outputs.rc_version }}.tar.gz

      - name: Generate changelog
        id: changelog
        run: |
          # Get commits since last release
          LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")

          if [ -z "$LAST_TAG" ]; then
            # No previous tags, get all commits
            CHANGELOG=$(git log --pretty=format:"- %s (%h)" --reverse --max-count=10)
          else
            # Get commits since last tag
            CHANGELOG=$(git log ${LAST_TAG}..HEAD --pretty=format:"- %s (%h)" --reverse)
          fi

          # Escape newlines for GitHub output
          CHANGELOG="${CHANGELOG//'%'/'%25'}"
          CHANGELOG="${CHANGELOG//$'\n'/'%0A'}"
          CHANGELOG="${CHANGELOG//$'\r'/'%0D'}"

          echo "changelog=${CHANGELOG}" >> $GITHUB_OUTPUT

      - name: Create GitHub Release
        id: create_release
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Create release notes file
          cat > release_notes.md << 'EOF'
          🚀 **Release Candidate v${{ steps.version.outputs.rc_version }}**

          **Auto-generated from commit:** ${{ steps.version.outputs.commit_sha }}
          **Build:** #${{ github.run_number }}

          ## Changes since last release:
          ${{ steps.changelog.outputs.changelog }}

          ## Usage with MCP:

          **Add to your MCP configuration:**
          ```json
          {
            "mcpServers": {
              "mobile-xray": {
                "command": "npx",
                "args": [
                  "--yes",
                  "https://github.com/${{ github.repository }}/releases/download/v${{ steps.version.outputs.rc_version }}/mobile-xray-mcp-${{ steps.version.outputs.rc_version }}.tar.gz"
                ]
              }
            }
          }
          ```

          **Or download and run locally:**
          ```bash
          wget https://github.com/${{ github.repository }}/releases/download/v${{ steps.version.outputs.rc_version }}/mobile-xray-mcp-${{ steps.version.outputs.rc_version }}.tar.gz
          tar -xzf mobile-xray-mcp-${{ steps.version.outputs.rc_version }}.tar.gz
          cd mobile-xray-mcp-${{ steps.version.outputs.rc_version }}
          node dist/index.js
          ```

          **Or use with npx (when published):**
          ```bash
          npx @cultivx/mobile-xray-mcp
          ```

          ---

          ⚠️ **This is a Release Candidate** - use for testing purposes.
          EOF

          # Create the release with GitHub CLI
          echo "Creating release v${{ steps.version.outputs.rc_version }}..."
          gh release create "v${{ steps.version.outputs.rc_version }}" \
            --title "Release Candidate v${{ steps.version.outputs.rc_version }}" \
            --notes-file release_notes.md \
            --prerelease \
            "./mobile-xray-mcp-${{ steps.version.outputs.rc_version }}.tar.gz"

          echo "Release created successfully!"

          # Store release URL for commit comment
          RELEASE_URL=$(gh release view "v${{ steps.version.outputs.rc_version }}" --json url --jq .url)
          echo "release_url=${RELEASE_URL}" >> $GITHUB_OUTPUT

      - name: Comment on commit
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.repos.createCommitComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              commit_sha: context.sha,
              body: `🚀 **RC Release Created!**

            **Version**: v${{ steps.version.outputs.rc_version }}
            **Download**: [GitHub Release](${{ steps.create_release.outputs.release_url }})

            **Quick MCP Config:**
            \`\`\`json
            {
              "mcpServers": {
                "mobile-xray": {
                  "command": "npx",
                  "args": ["--yes", "https://github.com/${{ github.repository }}/releases/download/v${{ steps.version.outputs.rc_version }}/mobile-xray-mcp-${{ steps.version.outputs.rc_version }}.tar.gz"]
                }
              }
            }
            \`\`\`
            `
            });
